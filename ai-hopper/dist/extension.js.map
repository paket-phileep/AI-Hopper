{"version":3,"file":"extension.js","mappings":"uuBAGA,oBAAyBA,GACvBC,QAAQC,IAAI,sEAEZF,EAAQG,cAAcC,KACpBC,EAAOC,SAASC,gBAAgB,sBAAsB,KACpDF,EAAOG,IAAIC,aAAaJ,EAAOK,IAAIC,MAAM,4BAA4B,IAEvEN,EAAOC,SAASC,gBAAgB,sBAAsB,KACpDF,EAAOG,IAAIC,aAAaJ,EAAOK,IAAIC,MAAM,4BAA4B,IAEvEN,EAAOC,SAASC,gBAAgB,sBAAsB,KACpDF,EAAOG,IAAIC,aAAaJ,EAAOK,IAAIC,MAAM,4BAA4B,IAEvEN,EAAOC,SAASC,gBAAgB,sBAAsB,KACpDF,EAAOG,IAAIC,aAAaJ,EAAOK,IAAIC,MAAM,4BAA4B,IAEvEN,EAAOC,SAASC,gBAAgB,yBAAyB,KACvD,EAAAK,gBAAgBC,aAAab,EAAQ,KAKzCK,EAAOS,OAAOC,4BAA4B,EAAAH,gBAAgBI,SAAU,IAAI,EAAAJ,gBAAgBZ,GAC1F,EA1BA,kBACA,Q,wuBCDA,kBAEA,MAAaY,EAKkBZ,QAJtBiB,gBAA2B,eAE1BC,MAER,WAAAC,CAA6BnB,GAAA,KAAAA,QAAAA,CAAmC,CAEzD,kBAAAoB,CAAmBC,EAAiCC,EAA4CC,GACrGC,KAAKN,MAAQG,EAEbA,EAAYI,QAAQC,QAAU,CAC5BC,eAAe,GAGjBH,KAAKI,UAELP,EAAYI,QAAQI,qBAAoBC,MAAOC,IAEtC,YADCA,EAAKC,YAEH3B,EAAOG,IAAIC,aAAaJ,EAAOK,IAAIC,MAAMoB,EAAKE,KAExD,GAEJ,CAEQ,OAAAL,GACDJ,KAAKN,QAIVM,KAAKN,MAAMO,QAAQS,KAAOV,KAAKW,qBACjC,CAEQ,kBAAAA,GACN,MAAO,uqBAqBT,CAEO,mBAAOtB,CAAab,GACzB,MAAMoC,EAAS/B,EAAOgC,WAAWC,IAE3BC,EAAQlC,EAAOS,OAAO0B,mBAAmB5B,EAAgBI,SAAU,eAAgBoB,EAAQ,CAC/FT,eAAe,IAGXc,EAAW,IAAI7B,EAAgBZ,GACrCuC,EAAMd,QAAQS,KAAOO,EAASN,qBAE9BI,EAAMd,QAAQI,qBAAoBC,MAAOY,IAEhC,YADCA,EAAQV,YAEN3B,EAAOG,IAAIC,aAAaJ,EAAOK,IAAIC,MAAM+B,EAAQT,KAE3D,GAEJ,EA1EF,mB,UCFAU,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://ai-hopper/./src/extension.ts","webpack://ai-hopper/./src/sidebarView.ts","webpack://ai-hopper/external commonjs \"vscode\"","webpack://ai-hopper/webpack/bootstrap","webpack://ai-hopper/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\nimport { SidebarProvider } from './sidebarView';\n\nexport function activate(context: vscode.ExtensionContext) {\n  console.log('Congratulations, your extension \"sidebar-extension\" is now active!');\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand('extension.openUrl1', () => {\n      vscode.env.openExternal(vscode.Uri.parse('https://example.com/url1'));\n    }),\n    vscode.commands.registerCommand('extension.openUrl2', () => {\n      vscode.env.openExternal(vscode.Uri.parse('https://example.com/url2'));\n    }),\n    vscode.commands.registerCommand('extension.openUrl3', () => {\n      vscode.env.openExternal(vscode.Uri.parse('https://example.com/url3'));\n    }),\n    vscode.commands.registerCommand('extension.openUrl4', () => {\n      vscode.env.openExternal(vscode.Uri.parse('https://example.com/url4'));\n    }),\n    vscode.commands.registerCommand('extension.showSidebar', () => {\n      SidebarProvider.createOrShow(context);\n    })\n  );\n\n  // Register sidebar view\n  vscode.window.registerWebviewViewProvider(SidebarProvider.viewType, new SidebarProvider(context));\n}\n","import * as vscode from \"vscode\";\n\nexport class SidebarProvider implements vscode.WebviewViewProvider {\n  public static readonly viewType = \"sidebar.view\";\n\n  private _view?: vscode.WebviewView;\n\n  constructor(private readonly context: vscode.ExtensionContext) {}\n\n  public resolveWebviewView(webviewView: vscode.WebviewView, _context: vscode.WebviewViewResolveContext, _token: vscode.CancellationToken) {\n    this._view = webviewView;\n\n    webviewView.webview.options = {\n      enableScripts: true,\n    };\n\n    this._update();\n\n    webviewView.webview.onDidReceiveMessage(async (data) => {\n      switch (data.type) {\n        case \"openUrl\":\n          await vscode.env.openExternal(vscode.Uri.parse(data.url));\n          return;\n      }\n    });\n  }\n\n  private _update() {\n    if (!this._view) {\n      return;\n    }\n\n    this._view.webview.html = this._getHtmlForWebview();\n  }\n\n  private _getHtmlForWebview() {\n    return `\n      <html>\n        <body>\n          <button onclick=\"openUrl('https://example.com/url1')\">Open URL 1</button>\n          <button onclick=\"openUrl('https://example.com/url2')\">Open URL 2</button>\n          <button onclick=\"openUrl('https://example.com/url3')\">Open URL 3</button>\n          <button onclick=\"openUrl('https://example.com/url4')\">Open URL 4</button>\n\n          <script>\n            const vscode = acquireVsCodeApi();\n\n            function openUrl(url) {\n              vscode.postMessage({\n                type: 'openUrl',\n                url: url\n              });\n            }\n          </script>\n        </body>\n      </html>\n    `;\n  }\n\n  public static createOrShow(context: vscode.ExtensionContext) {\n    const column = vscode.ViewColumn.One;\n\n    const panel = vscode.window.createWebviewPanel(SidebarProvider.viewType, \"Sidebar View\", column, {\n      enableScripts: true,\n    });\n\n    const provider = new SidebarProvider(context);\n    panel.webview.html = provider._getHtmlForWebview();\n\n    panel.webview.onDidReceiveMessage(async (message) => {\n      switch (message.type) {\n        case \"openUrl\":\n          await vscode.env.openExternal(vscode.Uri.parse(message.url));\n          return;\n      }\n    });\n  }\n}\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","console","log","subscriptions","push","vscode","commands","registerCommand","env","openExternal","Uri","parse","SidebarProvider","createOrShow","window","registerWebviewViewProvider","viewType","static","_view","constructor","resolveWebviewView","webviewView","_context","_token","this","webview","options","enableScripts","_update","onDidReceiveMessage","async","data","type","url","html","_getHtmlForWebview","column","ViewColumn","One","panel","createWebviewPanel","provider","message","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}